-- Sales Analysis Queries --
-- List all unique cities where customers are located.

Select 
	distinct customer_city 
From 
	customers
;

-- Count the number of orders placed in 2017.

Select
	count(order_id) as "Total Orders"
From
	orders
where
	year(order_purchase_timestamp)="2017"
;

-- Find the total sales per category.

Select
	product_category,
    round(sum(payment_value),2) as "Total Sales"
From
	products as p
Join
	order_items as i on p.product_id=i.product_id
Join
	payments as py on py.order_id=i.order_id
Group by
	product_category
Order by 
	round(sum(payment_value),2) desc
;


-- Calculate the percentage of orders that were paid in installments.

Select
	((
	Select
		count(order_id) 
	From
		payments
	Where
		payment_installments>1
    )
    /
    count(order_id))*100 as "Intallment %"
From
	payments
;

-- Count the number of customers from each state. 

Select
	customer_state,
    count(customer_id) as "Total Customers"
From
	customers
Group by 
	customer_state
Order by
	count(customer_id) desc
;

-- Calculate the number of orders per month in 2018.

Select
	month(order_purchase_timestamp) as "Month",
    count(order_id) as "Total Orders"
From
	orders
Where
	year(order_purchase_timestamp)="2018"
Group by
	month(order_purchase_timestamp)
Order by 
	count(order_id) desc
;

-- Find the average number of products per order, grouped by customer city.

With count_per_order as
(
	Select
		order_items.order_id,
        customer_id,
        count(order_item_id) as "oc"
	From
		order_items 
	Join 
		orders on orders.order_id=order_items.order_id
	Group by
		order_items.order_id,
        customer_id
)
Select
	customers.customer_state,
    avg(count_per_order.oc) as "Avg Product"
From
	customers
Join
	count_per_order on customers.customer_id=count_per_order.customer_id
Group by 
	customers.customer_state
;


--  Calculate the percentage of total revenue contributed by each product category.

With SalesSummary as
(
	Select
		product_category,
		round(sum(payment_value),2) as `Total Sales`
	From
		products as p
	Join
		order_items as i on p.product_id=i.product_id
	Join
		payments as py on py.order_id=i.order_id
	Group by
		product_category
	Order by 
		round(sum(payment_value),2) desc
)
Select
	product_category,
    round(((`Total Sales`/(Select round(sum(payment_value),2) From payments))*100),4) as "% of Total Revenue"
From
	SalesSummary
;

-- Identify the correlation between product price and the number of times a product has been purchased.

Select
	product_category,
    count(order_items.product_id) as`Total Orders`,
    round(avg(price),2) as "Price"
From 
	products
Join
	order_items on products.product_id=order_items.product_id
Group by
	product_category
;

-- Calculate the total revenue generated by each seller, and rank them by revenue.

Select
	sellers.seller_id,
    round(sum(payment_value),2) as `Total Revenue`,
    rank() over(order by sum(payment_value) desc) as `Rank`
From
	payments
Join
	order_items on order_items.order_id=payments.order_id
Join
	sellers on sellers.seller_id=order_items.seller_id
Group by
	seller_id
;
    
-- Calculate the moving average of order values for each customer over their order history.


Select
	c.customer_id,
    o.order_purchase_timestamp,
    py.payment_value,
    round(avg(py.payment_value) over( partition by c.customer_id 
									  order by o.order_purchase_timestamp asc 
									  rows between unbounded preceding and current row
									),2) as `Moving Average`
From
	customers as c
Join
	orders as o on o.customer_id=c.customer_id
Join
	payments as py on py.order_id=o.order_id
;

-- Calculate the cumulative sales per month for each year.

With SalesSummary as
(
	Select
		year(o.order_purchase_timestamp) as `Year`,
        month(o.order_purchase_timestamp) as `Month`,
		round(sum(py.payment_value),2) as `Sum`
	From
		orders as o
	Join
		payments as py on py.order_id=o.order_id
	Group by
		year(o.order_purchase_timestamp),
        month(o.order_purchase_timestamp)
)
Select
	`Year`,
	`Month`,
    `Sum`,
    round(sum(`Sum`) over(partition by `Year`
						  order by `Month`
						  rows between unbounded preceding and current row
						 ),2) as `Cumulative Sales`
From
	SalesSummary
;

-- Calculate the year-over-year growth rate of total sales.

With YoY as
(
	Select
		year(o.order_purchase_timestamp) as `Year`,
		round(sum(py.payment_value),2) as `Revenue`
	From
		orders as o
	Join
		payments as py on py.order_id=o.order_id
	Group by
		year(o.order_purchase_timestamp)
)
Select 
	`Year`,
    `Revenue`,
    Lag(`Revenue`) over (order by `Year`) as `Previous Year Revenue`,
    round(`Revenue`- Lag(`Revenue`) over (order by `Year`),2) as `YoY Growth`
From
	YoY
;
    
--  Identify the top 3 customers who spent the most money in each year.

With TopCustomers as
(
	Select
		year(o.order_purchase_timestamp) as `Year`,
        c.customer_id,
        round(sum(py.payment_value),2) as `Money Spent`,
        dense_rank() over(partition by year(o.order_purchase_timestamp)
						  order by sum(py.payment_value) desc
						  ) as `Rank`
	From 
		customers as c
	Join
		orders as o on o.customer_id=c.customer_id
	Join
		payments as py on py.order_id=o.order_id
	Group by
		year(o.order_purchase_timestamp),
        c.customer_id
)
		
Select 
	*
From
	TopCustomers
Where 
	`Rank`<=3
;


-- Calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase.

With A as
(
	Select
		c.customer_id,
        min(o.order_purchase_timestamp) as `First Order`
	From
		customers as c
	Join
		orders as o on c.customer_id=o.customer_id
	Group by
		c.customer_id
)
,
B as
(
	Select
		A.customer_id,
        count(distinct o.order_purchase_timestamp) as `Retention Orders`
	From
		A
	Join
		orders as o on o.customer_id=A.customer_id
	Where
		o.order_purchase_timestamp > `First Order`
	And
		o.order_purchase_timestamp < date_add(`First Order`, interval 6 Month)
	Group by
		A.customer_id
)		

Select
	(count(distinct B.customer_id)/count(distinct A.customer_id))*100 as `Customer Retention Rate`
From
	A
Join
	B on A.customer_id = B.customer_id
;